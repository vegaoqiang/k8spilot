#!/bin/bash


check_requirements(){
  PY_INTERPRETER=""
  if which python3 >/dev/null 2>&1; then
    PY_INTERPRETER=$(which python3)
  elif which python >/dev/null 2>&1; then
    PY_INTERPRETER=$(which python)
  else
    printf "\e[31mCan not found avaliable python interpreter in system\e[0m\n"
    printf "\e[31mYou may install python >= 3.10 by manual.\e[0m\n"
    exit 1
  fi
  ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/py_checker.py
  if [ "$?" -ne 0 ]; then
    exit 1
  fi
}

check_inventory(){
  local cluster_name=$1
  if [ -z "${cluster_name}" ]; then
    printf "\e[31m请指定需要部署的集群名称: $0 deploy mycluster \e[0m\n"
    if [ $(find $(dirname ${BASH_SOURCE[0]})/inventories -name "all.yml" -o -name "hosts"|grep -v 'cluster_template' | wc -l) -ne 0 ]; then
      printf "\e[36m当前k8spilot发现以下已经创建好的集群环境:\e[0m\n"
      for cluster in $(ls $(dirname ${BASH_SOURCE[0]})/inventories| grep -v "cluster_template"); do
        if [ -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster}/hosts" ] && [ -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster}/group_vars/all.yml" ]; then
          printf "\e[36m%s\e[0m\n" "${cluster}"
        fi
      done
    else
      printf "\e[31m当前k8spilot没有发现任何集群环境，请先使用 $0 create <cluster_name> 创建集群环境。\e[0m\n"
    fi
    exit 1
  fi
  if [ ! -d "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}" ] || [ ! -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml" ]; then
    printf "\e[31m集群环境 ${cluster_name} 不存在，请先使用 $0 create ${cluster_name} 创建集群环境\e[0m\n"
    exit 1
  fi

  ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py validation ${cluster_name}
  if [ "$?" -ne 0 ]; then
    printf "\e[32m开始初始化 ${cluster_name} 集群的inventory\e[0m\n"
    ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py generate ${cluster_name}
    if [ "$?" -ne 0 ]; then
      exit 1
    fi 
    printf "\e[32minventory初始化完成\e[0m\n"
  fi
}

# 部署方式
select_install_method(){
  local cluster_name=$1
  printf "\e[36m请选择${cluster_name}环境Kubernetes安装方式 [默认: 1]:\e[0m\n"
  printf "\e[36m  1) 在线安装\e[0m\n"
  printf "\e[36m  2) 离线安装\e[0m\n"
  while true; do
    if [ "$(uname)" == "Darwin" ]; then
      printf "\e[36m请输入选项 [1/2]: \e[0m"
      read method_opt
    else
      read -p "\e[36m请输入选项 [1/2]: \e[0m" method_opt
    fi
    if [ "$method_opt" != "1" ] && [ "$method_opt" != "2" ]; then
      printf "\e[31m输入了无效选项\e[0m\n"
    else
      break
    fi
  done
  if [ "${method_opt}" == "2" ]; then
    if [ ! -d "$(dirname ${BASH_SOURCE[0]})/artifacts" ] || [ ! -d "$(dirname ${BASH_SOURCE[0]})/artifacts/components" ] || \
    [ ! -d "$(dirname ${BASH_SOURCE[0]})/artifacts/images" ] || [ ! -d "$(dirname ${BASH_SOURCE[0]})/artifacts/kubernetes" ] || \
    [ -z "$(ls $(dirname ${BASH_SOURCE[0]})/artifacts/images)" ] || [ -z "$(ls $(dirname ${BASH_SOURCE[0]})/artifacts/kubernetes)" ]; then
      printf "\e[31m你选择了离线安装，但是缺少离线文件，请下载离线文件\e[0m\n"
      exit 1
    fi
    METHOD='offline'
  elif [ "${method_opt}" == "1" ]; then
    METHOD='online'
  else
    printf "\e[31m输入了无效选项\e[0m\n"
    exit 1
  fi
}

get_kube_version_online(){
  local cluster_name=$1
  VERSION=""
  printf "\e[36m正在获取kubernetes版本信息\e[0m\n"
  local version_list=$(curl -s --max-time 10 https://dl.k8spilot.icu/kubernetes/kube-versions)
  if [ "$?" -ne 0 ] || [ -z "${version_list}" ]; then
    local kube_version=$(grep 'kube_version' $(dirname ${BASH_SOURCE[0]})/cluster_sample/group_vars/all.yml|awk '{print $NF}')
    if [ "$(uname)" == "Darwin" ]; then
      printf "\e[36m在线读取kubernetes版本列表失败,将安装默认 ${kube_version} 是否安装？[Y/n]:\e[0m"
      read confirm
    else
      read -p "\e[36m在线读取kubernetes版本列表失败,将安装默认 ${kube_version} 是否安装？[Y/n]:\e[0m" confirm
    fi
    local confirm="${confirm:-y}"
    if [ "$(uname)" == "Darwin" ]; then
      local confirm_lower=$(echo "$confirm" | awk '{print tolower($0)}')
    else
      local confirm_lower=${confirm,,}
    fi
    if [ "${confirm_lower}" == "n" ]; then
      printf "\e[32m已取消安装\e[0m\n"
      exit 0
    fi
  else
    printf "\e[36m${version_list}\e[0m\n"
    local default_version=$(echo "${version_list}"|sed -n '$p')
    
    if [ "$(uname)" == "Darwin" ]; then
      printf "\e[36m请从以上版本列表选择并输入${cluster_name}环境安装的kubernetes版本 [默认:${default_version}]:\e[0m"
      read VERSION
    else
      read -p "\e[36m请从以上版本列表选择并输入${cluster_name}环境安装的kubernetes版本 [默认:${default_version}]:\e[0m" VERSION
    fi
    if [ ! -z "${VERSION}" ]; then
      if ! echo "${version_list}"|grep ${VERSION} > /dev/null; then
        printf "\e[31m你输入kubernetes版本${VERSION}不在支持列表中\e[0m\n"
        exit 1
      fi
      printf "\e[32m已选择安装kubernetes $VERSION\e[0m\n"
    else
      VERSION=${default_version}
    fi
  fi
}

get_kube_version_offline(){
  local cluster_name=$1
  # 如果artifacts/kubernetes目录下只存在一个离线版本，直接修改配置文件为该版本，如果存在多个离线版本，让用户选择
  local version_list=$(find artifacts/kubernetes -type d -d 1|awk -F/ '{print $NF}')
  VERSION=""
  if [ $(echo "${version_list}"|wc -l) -gt 1 ]; then
    local default_version=$(echo "${version_list}" | awk 'END{print}')
    printf "\e[36m${version_list}\e[0m\n"
    while true; do
      if [ "$(uname)" == "Darwin" ]; then
        printf "\e[36m发现多个离线版本，请手动输入 [默认 $default_version]:\e[0m"
        read VERSION
      else
        read -p "\e[36m发现多个离线版本，请手动输入 [默认 $default_version]:\e[0m" VERSION
      fi
      if [ -z "${VERSION}" ]; then
        VERSION=${default_version}
      fi
      echo "${version_list}"|grep -x "${VERSION}" >/dev/null 2>&1
      if [ "$?" -eq 0 ]; then
        break
      else
        printf "\e[31m输入了无效版本，请核对后重新输入。\e[0m\n"
      fi
    done
  elif [ $(echo "${version_list}"|wc -l) -eq 1 ]; then
    VERSION="${version_list}"
  else
    printf "\e[31m未找到离线版本\e[0m\n"
    exit 1
  fi
  printf "\e[32m已选择${cluster_name}环境安装的 Kubernetes版本为 ${VERSION}\e[0m\n"
}

select_kube_version(){
  local cluster_name=$1
  printf "\e[36m请选择${cluster_name}环境安装的Kubernetes版本\e[0m\n"
  if [ "${METHOD}" == "offline" ]; then
    get_kube_version_offline
  elif [ "${METHOD}" == "online" ]; then
    get_kube_version_online "${cluster_name}"
  else
    printf "\e[31m未知部署方案\e[0m\n"
    exit 1
  fi
}

deploy_kube(){
  local cluster_name=$1
  local kube_version=$(grep 'kube_version' $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml|awk '{print $NF}')
  if [ "$(uname)" == "Darwin" ]; then
    printf "\e[36m开始为${cluster_name}环境安装Kubernetes ${kube_version} 集群, 是否确认安装[Y/n]:\e[0m"
    read confirm
  else
    read -p "\e[36m开始为${cluster_name}环境安装Kubernetes ${kube_version} 集群, 是否确认安装[Y/n]:\e[0m" confirm
  fi
  local confirm="${confirm:-y}"
  if [ "$(uname)" == "Darwin" ]; then
    local confirm_lower=$(echo "$confirm" | awk '{print tolower($0)}')
  else
    local confirm_lower=${confirm,,}
  fi
  if [ "${confirm_lower}" == 'n' ]; then
    printf "\e[32m已取消安装\e[0m\n"
    exit 0
  fi
  ansible-playbook -i $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name} pilot.yml
  if [ "$?" -eq 0 ]; then
    printf "\e[32mKubernetes ${kube_version}安装完成. 请登录到Kubernetes集群control-plane节点，执行以下命令查看集群状态:\e[0m\n\n"
    printf "\e[32mkubectl get nodes -o wide \e[0m\n"
    printf "\e[32mkubectl get pods -A\e[0m\n\n"
    printf "\e[32m也可以使用lens等工具连接到Kubernetes进行集群管理。复制以下文件或将其内容添加到lens的kubeconfig中: \e[0m\n\n"
    printf "\e[32mcat .kubeconfig \e[0m\n\n"
  fi
}

# 创建集群环境
create_cluster(){
  local cluster_name=$1
  if [ -z "${cluster_name}" ]; then
    printf "\e[31m请指定环境名称\e[0m\n"
    exit 1
  fi
  if [ -d "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}" ] && [ -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml" ]; then
    printf "\e[31m环境 ${cluster_name} 已存在\e[0m\n"
    exit 1
  fi
  if [ ! -d "$(dirname ${BASH_SOURCE[0]})/cluster_sample" ]; then
    printf "\e[31m无法找到 cluster_sample 目录，无法创建集群环境\e[0m\n"
    exit 1
  fi

  select_install_method "${cluster_name}"
  select_kube_version "${cluster_name}"

  cp -r $(dirname ${BASH_SOURCE[0]})/cluster_sample $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}

  if [ "$(uname)" == "Darwin" ]; then
    sed -i '' "s#method: .*#method: $METHOD#g" $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml
    sed -i '' "s#kube_version: .*#kube_version: $VERSION#g" $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml
  else
    sed -i "s#method: .*#method: $METHOD#g" $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml
    sed -i "s#kube_version: .*#kube_version: $VERSION#g" $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml
  fi
  
  printf "\e[36m是否初始化${cluster_name}环境集群主机清单？主机清单也可以在稍后开始安装集群后初始化，还可以在开始安装集群之前手动编辑主机清单文件。\e[0m\n"
  if [ "$(uname)" == "Darwin" ]; then
    printf "\e[36m是否立即初始化${cluster_name}环境集群主机清单？[Y/n]: \e[0m"
    read confirm
  else
    read -p "\e[36m是否立即初始化${cluster_name}环境集群主机清单？[Y/n]: \e[0m" confirm
  fi
  local confirm="${confirm:-y}"
  if [ "$(uname)" == "Darwin" ]; then
    local confirm_lower=$(echo "$confirm" | awk '{print tolower($0)}')
  else
    local confirm_lower=${confirm,,}
  fi
  if [ "${confirm_lower}" == 'n' ]; then
    printf "\e[32m已跳过初始化主机清单\e[0m\n"
  else
    check_requirements
    ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py generate ${cluster_name}
  fi

  printf "\e[32m${cluster_name} 集群环境已经创建成功，可编辑$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml文件，自定义kubernetes集群安装参数。\e[0m\n"
  printf "\e[32m使用 ./pilot deploy ${cluster_name} 命令开始部署 ${cluster_name} kubernetes集群。\e[0m\n"
}

help(){
  echo "Usage: $0 <create|deploy> [mycluster]"
  echo "  create: Create a new cluster environment"
  echo "  deploy: Deploy Kubernetes cluster"
  echo "Example: $0 create production_cluster"
  echo "         $0 deploy production_cluster"
  exit 1
}

case $1 in
  deploy)
  check_requirements
  check_inventory $2
  deploy_kube $2
  ;;
  create)
  create_cluster $2
  ;;
  *)
  help
  ;;
esac