#!/bin/bash


INVENTORY="hosts"
ENV="production"

check_requirements(){
  PY_INTERPRETER=""
  if which python3 >/dev/null 2>&1; then
    PY_INTERPRETER=$(which python3)
  elif which python >/dev/null 2>&1; then
    PY_INTERPRETER=$(which python)
  else
    echo "Can not found avaliable python interpreter in system"
    echo "You may install python >= 3.10 by manual."
    exit 1
  fi
  ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/py_checker.py
  if [ "$?" -ne 0 ]; then
    exit 1
  fi
}

check_inventory(){
  local culster_name=$1
  if [ -z "${culster_name}" ]; then
    printf "\e[31m请指定需要部署的集群名称: $0 deploy mycluster \e[0m\n"
    if [ $(find $(dirname ${BASH_SOURCE[0]})/inventories -name "all.yml" -o -name "hosts"|grep -v 'cluster_template' | wc -l) -ne 0 ]; then
      printf "当前k8spilot发现以下已经创建好的集群环境:\n"
      for cluster in $(ls $(dirname ${BASH_SOURCE[0]})/inventories| grep -v "cluster_template"); do
        if [ -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster}/hosts" ] && [ -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster}/group_vars/all.yml" ]; then
          printf "\e[32m%s\e[0m\n" "${cluster}"
        fi
      done
    else
      printf "当前k8spilot没有发现任何集群环境，请先使用 $0 create <cluster_name> 创建集群环境。\n"
    fi
    exit 1
  fi
  if [ ! -d "$(dirname ${BASH_SOURCE[0]})/inventories/${culster_name}" ] || [ ! -f "$(dirname ${BASH_SOURCE[0]})/inventories/${culster_name}/group_vars/all.yml" ]; then
    printf "\e[31m集群环境 ${culster_name} 不存在，请先使用 $0 create ${culster_name} 创建集群环境\e[0m\n"
    exit 1
  fi

  ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py validation ${culster_name}
  if [ "$?" -ne 0 ]; then
    echo "开始初始化 ${culster_name} 集群的inventory"
    ${PY_INTERPRETER} $(dirname ${BASH_SOURCE[0]})/scripts/inventory_checker.py generate ${culster_name}
    if [ "$?" -ne 0 ]; then
      exit 1
    fi 
    printf "\e[32minventory初始化完成\e[0m\n"
  fi
}

select_kube_version(){
  local cluster_name=$1
  printf "\e[32m正在获取kubernetes版本信息\e[0m\n"
  local version_list=$(curl -s --max-time 10 https://dl.k8spilot.icu/kubernetes/kube-versions)
  if [ "$?" -ne 0 ] || [ -z "${version_list}" ]; then
    local kube_version=$(grep 'kube_version' $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml|awk '{print $NF}')
    read -p "在线读取kubernetes版本列表失败,将安装默认 ${kube_version} 是否安装？[Y/n]:" confirm
    if [ "$(uname)" == "Darwin" ]; then
      local confirm_lower=$(echo "$confirm" | awk '{print tolower($0)}')
    else
      local confirm_lower=${confirm,,}
    fi
    if [ "${confirm_lower}" == "n" ]; then
      echo "已取消安装"
      exit 0
    fi
  else
    printf "\e[32m${version_list}\e[0m\n"
    local default_version=$(echo "${version_list}"|sed -n '$p')
    read -p "请从以上版本列表选择并输入本次安装的kubernetes版本 [默认:${default_version}]:" version
    if [ ! -z "${version}" ]; then
      if ! echo "${version_list}"|grep ${version} > /dev/null; then
        printf "\e[32m你输入kubernetes版本${version}不在支持列表中\e[0m\n"
        exit 1
      fi
      printf "\e[32m已选择安装kubernetes $version\e[0m\n"
    else
      version=${default_version}
    fi
    if [ "$(uname)" == "Darwin" ]; then
      sed -i '' "s#kube_version: .*#kube_version: $version#g" $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml
    else
      sed -i "s#kube_version: .*#kube_version: $version#g" $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml
    fi
  fi
}

deploy_kube(){
  local culster_name=$1
  printf "\e[32m开始安装kubernetes集群\e[0m\n"
  ansible-playbook -i $(dirname ${BASH_SOURCE[0]})/inventories/${culster_name} pilot.yml
  if [ "$?" -eq 0 ]; then
    printf "\e[32mKubernetes ${kube_version}安装完成. 请登录到Kubernetes集群control-plane节点，执行以下命令查看集群状态:\e[0m\n\n"
    printf "\e[32mkubectl get nodes -o wide \e[0m\n"
    printf "\e[32mkubectl get pods -A\e[0m\n\n"
    printf "\e[32m也可以使用lens等工具连接到Kubernetes进行集群管理。复制以下文件或将其内容添加到lens的kubeconfig中: \e[0m\n\n"
    printf "\e[32mcat .kubeconfig \e[0m\n\n"
  fi
}

# 创建集群环境
create_cluster(){
  local cluster_name=$1
  if [ -z "${cluster_name}" ]; then
    printf "\e[31m请指定环境名称\e[0m\n"
    exit 1
  fi
  if [ -d "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}" ] && [ -f "$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml" ]; then
    printf "\e[31m环境 ${cluster_name} 已存在\e[0m\n"
    exit 1
  fi
  cp -r $(dirname ${BASH_SOURCE[0]})/inventories/cluster_template $(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}
  printf "\e[32m${cluster_name} 集群环境已经创建成功，请编辑$(dirname ${BASH_SOURCE[0]})/inventories/${cluster_name}/group_vars/all.yml文件，自定义kubernetes集群安装参数。\e[0m\n"
  printf "\e[32m使用 ./pilot deploy -i ${cluster_name} 命令开始部署 ${cluster_name} kubernetes集群。\e[0m\n"
}

help(){
  echo "Usage: $0 <create|deploy> [mycluster]"
  echo "  create: Create a new cluster environment"
  echo "  deploy: Deploy Kubernetes cluster"
  echo "Example: $0 create production_cluster"
  echo "         $0 deploy production_cluster"
  exit 1
}

case $1 in
  deploy)
  check_requirements
  check_inventory $2
  select_kube_version  $2
  deploy_kube $2
  ;;
  create)
  create_cluster $2
  ;;
  *)
  help
  ;;
esac