
# - name: Enable pip3
#   shell: |
#     python -m ensurepip --upgrade
#   tags: config

# - name: Install Kubernetes module
#   shell: |
#     pip3 install kubernetes -i https://pypi.tuna.tsinghua.edu.cn/simple
#   tags: config


# - name: Taint Master to Noschedule
#   kubernetes.core.k8s_taint:
#     name: "{{ inventory_hostname }}"
#     taints:
#     - effect: NoSchedule
#       key: "node-role.kubernetes.io/master"
#       value: ""
#   tags: config


- name: Create Namespace
  ansible.builtin.shell: |
    kubectl get namespace "{{ item }}" || kubectl create namespace "{{ item }}"
  loop: "{{ namespace_create_need }}"


- name: Create Image Pull Secret
  shell: |
    kubectl get secret regcred -n '{{ item }}'||kubectl create secret generic regcred \
    --namespace '{{ item }}' \
    --from-literal='.dockerconfigjson={"auths": {
                "reg.guideirai.online": {
                        "auth": "YWRtaW46Z3NkdEAwMDI0MTQ0"
                }
              }}' \
    --type=kubernetes.io/dockerconfigjson
  loop: "{{ namespace_need_pull_secret }}"

# - name: copy CNI plugin calico manifest to remote
#   ansible.builtin.template:
#     src: "calico.yaml"
#     dest: "~/calico/"
#   when: ansible_distribution == 'Kylin Linux Advanced Server'
#   tags: cni

# - name: install CNI plugin calico
#   ansible.builtin.shell:
#     kubectl apply -f ~/calico/calico.yaml
#   when: ansible_distribution == 'Kylin Linux Advanced Server'
#   tags: cni

# - name: copy CNI plugin flannel manifest to remote
#   ansible.builtin.template:
#     src: "kube-flannel.yaml"
#     dest: "~/flannel/"
#   when: ansible_distribution == 'Kylin Linux Advanced Server'
#   tags: cni

# - name: install CNI plugin flannel
#   ansible.builtin.shell:
#     kubectl apply -f ~/flannel/kube-flannel.yaml
#   when: ansible_distribution == 'Kylin Linux Advanced Server'
#   tags: cni

# - name: Copy cilium offline image to remote
#   ansible.builtin.unarchive:
#     src: "roles/cilium/files/cilium-images-{{ cilium_version }}-{{ansible_architecture}}.tar.gz"
#     dest: "~/cilium/"
#   # when: ansible_distribution != 'Kylin Linux Advanced Server'
#   tags: cni

- name: install CNI plugin cilium
  ansible.builtin.include_role:
    name: cilium
  tags: cni

- name: Wait CNI plugin started
  ansible.builtin.pause:
    seconds: 30
  tags: cni

- name: Copy yaml to remote
  template:
    src: "{{ item }}"
    dest: ~/yamls/
  loop:
    # - kafka.yaml
    # - minio.yaml
    - mysql.yaml
    - nacos.yaml
    - powerjob.yaml
    - pulsar.yaml
    - redis.yaml
    - coredns.yaml
    - apisix.yaml
    - ingress-nginx.yaml

- name: Copy openebs-localpv-previsioner yaml to remote
  ansible.builtin.template:
    src: hostpath-operator.yaml
    dest: ~/

- name: Install openebs-localpv-previsioner
  ansible.builtin.shell:
    kubectl apply -f ~/hostpath-operator.yaml

- name: Wait openebs-localpv-previsioner started
  ansible.builtin.pause:
    seconds: 15

- name: Apply yamls
  ansible.builtin.shell: |
    kubectl apply -f ~/yamls/

- name: Create kube-prometheus directory
  ansible.builtin.shell: |
    [[ -d ~/kube-prometheus ]] || mkdir ~/kube-prometheus

- name: Copy kube-prometheus manifests to remote
  ansible.builtin.unarchive:
    src: "{{role_path}}/files/prometheus/kube-prometheus-manifest.tar.gz"
    dest: "~/kube-prometheus/"

# - name: Find node-exporter .tar files
#   ansible.builtin.find:
#     paths: "{{role_path}}/files/prometheus/{{ansible_architecture}}/"
#     patterns: "node-exporter*.tar,kube-rbac-proxy*.tar"
#   register: tar_files

- name: Copy node-exporter image to kube master
  ansible.builtin.copy:
    src: "{{role_path}}/files/prometheus/{{ansible_architecture}}/{{ item}}"
    dest: "/tmp/"
  loop: 
    - node-exporter-v1.8.2.tar
    - kube-rbac-proxy-v0.18.0.tar
  when: allow_master_schedule != true

- name: Load node-exporter image to containerd
  ansible.builtin.shell: |
    ctr -n k8s.io i import /tmp/node-exporter*.tar
    ctr -n k8s.io i import /tmp/kube-rbac-proxy*.tar
    rm -f /tmp/*.tar
  when: allow_master_schedule != true

- name: Install kube-prometheus
  ansible.builtin.shell: |
    kubectl create -f ~/kube-prometheus/setup/
    kubectl create -f ~/kube-prometheus/
