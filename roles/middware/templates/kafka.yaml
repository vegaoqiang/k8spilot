# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: kafka-local-pv
# spec:
#   capacity:
#     storage: 10Gi
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Delete
#   local:
#     path: /mnt/data/kafka
#   nodeAffinity:
#     required:
#       nodeSelectorTerms:
#         - matchExpressions:
#             - key: kubernetes.io/hostname
#               operator: In
#               values:
#                 - "{{ groups['schedulernode'] | random  }}"

---

apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: "{{ middware_namespace }}"
spec:
  ports:
    - name: kafka
      port: 9092
      targetPort: 9092
      protocol: TCP
    - name: controller
      port: 9093
      targetPort: 9093
      protocol: TCP
    - name: external
      port: 9094
      targetPort: 9094
      protocol: TCP
  selector:
    app: kafka
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-nodeport
  namespace: "{{ middware_namespace }}"
spec:
  ports:
    - name: kafka
      port: 9092
      targetPort: 9092
      nodePort: 39092
      protocol: TCP
    - name: controller
      port: 9093
      targetPort: 9093
      nodePort: 39093
      protocol: TCP
    - name: external
      port: 9094
      targetPort: 9094
      nodePort: 39094
      protocol: TCP
  selector:
    app: kafka
  type: NodePort

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-configuration
  namespace: "{{ middware_namespace }}"
data:
  server.properties: |-
    num.network.threads=3
    num.io.threads=8
    socket.send.buffer.bytes=102400
    socket.receive.buffer.bytes=102400
    socket.request.max.bytes=104857600
    num.partitions=1
    num.recovery.threads.per.data.dir=1
    offsets.topic.replication.factor=1
    transaction.state.log.replication.factor=1
    transaction.state.log.min.isr=1
    log.retention.hours=168
    log.segment.bytes=1073741824
    log.retention.check.interval.ms=300000
    zookeeper.connect= # KRaft 模式不需要 Zookeeper
    group.initial.rebalance.delay.ms=0

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: "{{ middware_namespace }}"
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
        - name: kafka
          image: reg.guideirai.online/base/kafka:{{kafka_version}}
            #command: ["/bin/bash", "-c"]
            #args:
            #- |
            #  mkdir -p /bitnami/kafka/config
          env:
            - name: KAFKA_CFG_PROCESS_ROLES
              value: broker,controller
            - name: KAFKA_CFG_NODE_ID
              value: "1"
            - name: KAFKA_CFG_LISTENERS
              value: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: PLAINTEXT://:9092,EXTERNAL://:9094
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: 1@localhost:9093
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
            - name: KAFKA_CFG_LOG_DIRS
              value: /bitnami/kafka/data
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          ports:
            - containerPort: 9092
              name: kafka
            - containerPort: 9093
              name: controller
            - containerPort: 9094
              name: external
          volumeMounts:
            - name: kafka-pvc
              mountPath: /bitnami/kafka
  volumeClaimTemplates:
    - metadata:
        name: kafka-pvc
        namespace: "{{ middware_namespace }}"
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi