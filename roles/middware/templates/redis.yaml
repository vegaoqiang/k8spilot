# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: redis-local-pv
# spec:
#   capacity:
#     storage: 5Gi
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Delete
#   local:
#     path: /mnt/data/redis
#   nodeAffinity:
#     required:
#       nodeSelectorTerms:
#         - matchExpressions:
#             - key: kubernetes.io/hostname
#               operator: In
#               values:
#                 - "{{ groups['schedulernode'] | random  }}"

---
apiVersion: v1
kind: Secret
metadata:
  name: redis
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
data:
  redis-password: Z3NkdEAwMDI0MTQ=
type: Opaque

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configuration
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
data:
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-health
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
data:
  ping_liveness_local.sh: >-
    #!/bin/bash


    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(<
    "${REDIS_PASSWORD_FILE}")"

    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"

    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )

    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi

    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')

    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [
    "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: >-
    #!/bin/bash


    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(<
    "${REDIS_MASTER_PASSWORD_FILE}")"

    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export
    REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"

    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )

    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi

    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')

    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: >-
    #!/bin/bash


    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(<
    "${REDIS_PASSWORD_FILE}")"

    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"

    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )

    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi

    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: >-
    #!/bin/bash


    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(<
    "${REDIS_MASTER_PASSWORD_FILE}")"

    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export
    REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"

    response=$(
      timeout -s 15 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )

    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi

    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-scripts
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
data:
  start-master.sh: >
    #!/bin/bash


    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(<
    "${REDIS_PASSWORD_FILE}")"

    if [[ -f /opt/bitnami/redis/mounted-etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi

    if [[ -f /opt/bitnami/redis/mounted-etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi

    ARGS=("--port" "${REDIS_PORT}")

    ARGS+=("--requirepass" "${REDIS_PASSWORD}")

    ARGS+=("--masterauth" "${REDIS_PASSWORD}")

    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")

    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")

    exec redis-server "${ARGS[@]}"

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: start-scripts
          configMap:
            name: redis-scripts
            defaultMode: 493
        - name: health
          configMap:
            name: redis-health
            defaultMode: 493
        - name: config
          configMap:
            name: redis-configuration
            defaultMode: 420
        - name: empty-dir
          emptyDir: {}
      containers:
        - name: redis
          image: reg.guideirai.online/base/redis:{{redis_version}}
          command:
            - /bin/bash
          args:
            - '-c'
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            - name: BITNAMI_DEBUG
              value: 'false'
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: 'no'
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: redis-password
            - name: REDIS_TLS_ENABLED
              value: 'no'
            - name: REDIS_PORT
              value: '6379'
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 1Gi
              memory: 1Gi
            requests:
              cpu: 100m
              ephemeral-storage: 500Mi
              memory: 1Gi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-pvc
              mountPath: /data
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: empty-dir
              mountPath: /opt/bitnami/redis/etc/
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
          livenessProbe:
            exec:
              command:
                - sh
                - '-c'
                - /health/ping_liveness_local.sh 5
            initialDelaySeconds: 20
            timeoutSeconds: 6
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - sh
                - '-c'
                - /health/ping_readiness_local.sh 1
            initialDelaySeconds: 20
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
      imagePullSecrets:
        - name: regcred
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: redis-pvc
        labels:
          app: redis
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
        volumeMode: Filesystem
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain

---

apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
spec:
  ports:
    - name: tcp-redis
      protocol: TCP
      port: 6379
      targetPort: redis
  selector:
    app: redis
  type: ClusterIP

---

apiVersion: v1
kind: Service
metadata:
  name: redis-nodeport
  namespace: "{{ middware_namespace }}"
  labels:
    app: redis
spec:
  ports:
    - name: tcp-redis
      protocol: TCP
      port: 6379
      targetPort: redis
      nodePort: 36379
  selector:
    app: redis
  type: NodePort