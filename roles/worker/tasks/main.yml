---

- name: Install Kernel Module Conf 
  copy:
    src: "cri.conf"
    dest: "/etc/modules-load.d/cri.conf"
    owner: root
    group: root
    mode: 0644

- name: Load Overlay and  Br_netfilter Module
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
  - overlay
  - br_netfilter
  - ip_tables

- name: CRI Kernel Tuning
  ansible.posix.sysctl: 
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
  with_items: "{{ cri_kernel_params }}"


- name: Create Containerd And CNI Directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
  loop:
  - /etc/containerd
  - /opt/cni/bin
  - /etc/cni/net.d

- name: Check Kubernetes {{ kube_version }} Worker Components Exist
  ansible.builtin.stat:
    path: "{{ kube_path }}/{{ kube_version }}/linux/{{ arch_alias }}/kubelet"
  delegate_to: localhost
  run_once: true
  register: kubelet_stat

- name: Kubernetes {{ kube_version }} Worker Components Offline File Not Exist
  ansible.builtin.fail:
    msg: "{{ kube_path }}/{{ kube_version }}/linux/{{ arch_alias }}/kubelet not exists"
  when: not kubelet_stat.stat.exists and method == 'offline'

- name: Downloading Kubernetes {{ kube_version }} Worker Components
  ansible.builtin.get_url:
    url: "{{ kube_download_url_prefix }}/{{ kube_version }}/bin/linux/{{ arch_alias }}/{{ item }}"
    dest: "{{ kube_path }}/{{ kube_version }}/linux/{{ arch_alias }}/{{ item }}"
    mode: '0755'
    timeout: 60
  # amazon.aws.s3_object:
  #   endpoint_url: "{{ s3_endpoint_url }}"
  #   access_key: "{{ s3_access_key }}"
  #   secret_key: "{{ s3_secret_key }}"
  #   bucket: "{{ s3_bucket_name }}"
  #   object: "kubernetes/{{ kube_version }}/linux/{{ arch_alias }}/{{ item }}"
  #   dest: "{{ kube_path }}/{{ kube_version }}/linux/{{ arch_alias }}/{{ item }}"
  #   mode: get
  #   overwrite: different
  delegate_to: localhost
  run_once: true
  loop:
    - kubelet
  retries: 5
  delay: 10
  when: not kubelet_stat.stat.exists and method == 'online'

- name: Copy Kubernetes Worker Components To Remote Host
  ansible.builtin.copy:
    src: "{{ kube_path }}/{{ kube_version }}/linux/{{ arch_alias }}/{{ item }}"
    dest: "{{ kubernetes_home }}/bin/{{ item }}"
    mode: '0755'
  loop:
    - kubelet

- name: Check Containerd {{ containerd_version }} Exist
  ansible.builtin.stat:
    path: "{{ component_path }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
  delegate_to: localhost
  run_once: true
  register: containerd_stat

- name: Containerd {{ containerd_version }} Offline File Not Exist
  ansible.builtin.fail:
    msg: "{{ component_path }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz not exists"
  when: not containerd_stat.stat.exists and method == 'offline'

- name: Downloading Containerd {{ containerd_version }}
  ansible.builtin.get_url:
    url: "{{ containerd_download_url_prefix }}/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "{{ component_path }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
    mode: '0755'
    timeout: 60
  # amazon.aws.s3_object:
  #   endpoint_url: "{{ s3_endpoint_url }}"
  #   access_key: "{{ s3_access_key }}"
  #   secret_key: "{{ s3_secret_key }}"
  #   bucket: "{{ s3_bucket_name }}"
  #   object: "containerd/v{{ containerd_version }}/linux/{{ arch_alias }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
  #   dest: "{{ component_path }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
  #   mode: get
  #   overwrite: different
  delegate_to: localhost
  run_once: true
  retries: 5
  delay: 10
  when: not containerd_stat.stat.exists and method == 'online'

- name: Copy Containerd Binary To Remote Host
  ansible.builtin.copy:
    src:  "{{ component_path }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"

- name: Install Containerd Binary In Remote Host
  uncompress:
    src: "/tmp/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/usr/local/"
    mode: '0755'

- name: Check runc {{ runc_version }} Exist
  ansible.builtin.stat:
    path: "{{ component_path }}/runc.{{ arch_alias }}"
  delegate_to: localhost
  run_once: true
  register: runc_stat

- name: runc {{ runc_version }} Offline File Not Exist
  ansible.builtin.fail:
    msg: "{{ component_path }}/runc.{{ arch_alias }} not exists"
  when: not runc_stat.stat.exists and method == 'offline'

- name: Downloading runc {{ runc_version }}
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "runc/{{ runc_version }}/linux/{{ arch_alias }}/runc.{{ arch_alias }}"
    dest: "{{ component_path }}/runc.{{ arch_alias }}"
    mode: get
    overwrite: different
  delegate_to: localhost
  run_once: true
  retries: 5
  delay: 10
  when: not runc_stat.stat.exists and method == 'online'

- name: Copy runc Binary To Remote Host
  ansible.builtin.copy:
    src: "{{ component_path }}/runc.{{ arch_alias }}"
    dest: "/usr/local/sbin/runc"
    mode: '0755'

- name: Check CNI plugins {{ cni_version }} Exist
  ansible.builtin.stat:
    path: "{{ component_path }}/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
  delegate_to: localhost
  run_once: true
  register: cni_plugin_stat

- name: CNI plugins {{ cni_version }} Offline File Not Exist
  ansible.builtin.fail:
    msg: "{{ component_path }}/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz not exists"
  when: not cni_plugin_stat.stat.exists and method == 'offline'

- name: Downloading CNI plugins {{ cni_version }}
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "cni-plugins/{{ cni_version }}/linux/{{ arch_alias }}/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
    dest: "{{ component_path }}/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
    mode: get
    overwrite: different
  delegate_to: localhost
  run_once: true
  retries: 5
  delay: 10
  when: not cni_plugin_stat.stat.exists and method == 'online'

- name: Copy CNI plugins Binary To Remote Host
  ansible.builtin.copy:
    src: "{{ component_path }}/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
    dest: "/tmp/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"

- name: Install CNI plugins Binary In Remote Host
  uncompress:
    src: "/tmp/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
    dest: "/opt/cni/bin/"
    mode: '0755'
    strip_components: 1


- name: Install Worker Certificate And Service File
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "{{ playbook_dir }}/ca/{{ root_cert }}", dest: "{{ kubernetes_home }}/ssl/ca.pem" }
  - { src: "{{ playbook_dir }}/ca/{{ root_key }}", dest: "{{ kubernetes_home }}/ssl/key.pem" }
  - { src: "containerd.service", dest: "/usr/lib/systemd/system/containerd.service" }
  - { src: "crictl.yaml", dest: "/etc/crictl.yaml" }
  - { src: "10-containerd-net.conflist", dest: "/etc/cni/net.d/"}


- name: Install Kube-Worker Systemd Config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "kubelet.conf", dest: "{{ kubernetes_home }}/etc/kubelet.conf" }
  - { src: "kubelet.yaml", dest: "{{ kubernetes_home }}/etc/kubelet.yaml" }
  - { src: "kubelet.service.j2", dest: "/usr/lib/systemd/system/kubelet.service" }
  - { src: "config.toml", dest: "/etc/containerd/config.toml" }


- name: Install Worker Kubeconfig
  template:
    src: "node.kubeconfig"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { dest: "{{ kubernetes_home }}/etc/kubelet-bootstrap.kubeconfig", context_user: "kubelet-bootstrap" }


- name: Enable Kubernetes Worker Service
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
  - 'containerd'
  - 'kubelet'

