---

- name: Set Architecture Alias
  set_fact:
    arch_alias: >-
      {% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}{{ ansible_architecture }}{% endif %}

- name: Downloading Kubernetes {{ kube_version }} Worker Components
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "kubernetes/{{ kube_version }}/linux/{{ arch_alias }}/{{ item }}"
    dest: "{{ kubernetes_home }}/bin/{{ item }}"
    mode: get
    overwrite: different
  async: 6000
  poll: 100
  loop:
    - kubelet
  retries: 5
  delay: 10

- name: Grant Executable Permissions For Components
  ansible.builtin.shell: chmod +x {{ kubernetes_home }}/bin/*

- name: Downloading Containerd {{ containerd_version }}
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "containerd/v{{ containerd_version }}/linux/{{ arch_alias }}/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz"
    mode: get
    overwrite: different
  async: 6000
  poll: 100
  retries: 5
  delay: 10

- name: Downloading runc 
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "runc/v1.3.0/linux/{{ arch_alias }}/runc.{{ arch_alias }}"
    dest: "/usr/local/sbin/runc"
    mode: get
    overwrite: different
  async: 6000
  poll: 100
  retries: 5
  delay: 10

- name: Downloading CNI plugins
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "cni-plugins/{{ cni_version }}/linux/{{ arch_alias }}/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
    dest: "/tmp/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz"
    mode: get
    overwrite: different
  async: 6000
  poll: 100
  retries: 5
  delay: 10

- name: Install Kernel Module Conf 
  copy:
    src: "cri.conf"
    dest: "/etc/modules-load.d/cri.conf"
    owner: root
    group: root
    mode: 0644

- name: Load Overlay and  Br_netfilter Module
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
  - overlay
  - br_netfilter

- name: CRI Kernel Tuning
  ansible.posix.sysctl: 
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
  with_items: "{{ cri_kernel_params }}"


- name: Install Containerd With Plugins
  ansible.builtin.shell: |
    tar -xf /tmp/containerd-{{ containerd_version }}-linux-{{ arch_alias }}.tar.gz -C /usr/local/
    if [ ! -d "/opt/cni/bin" ]; then
      mkdir -p /opt/cni/bin
    fi
    if [ ! -d /etc/cni/net.d ]; then
      mkdir -p /etc/cni/net.d
    fi
    if [ ! -d /etc/containerd ]; then
      mkdir -p /etc/containerd
    fi
    tar --strip-components=1 -xf /tmp/cni-plugins-linux-{{ arch_alias }}-{{ cni_version }}.tgz -C /opt/cni/bin/
    chmod +x /usr/local/sbin/runc
  
- name: Install Worker Certificate And Service File
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "{{ inventory_dir }}/{{ root_cert }}", dest: "{{ kubernetes_home }}/ssl/ca.pem" }
  - { src: "{{ inventory_dir }}/{{ root_key }}", dest: "{{ kubernetes_home }}/ssl/key.pem" }
  - { src: "containerd.service", dest: "/usr/lib/systemd/system/containerd.service" }
  - { src: "crictl.yaml", dest: "/etc/crictl.yaml" }
  - { src: "10-containerd-net.conflist", dest: "/etc/cni/net.d/"}


- name: Install Kube-Worker Systemd Config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "kubelet.conf", dest: "{{ kubernetes_home }}/etc/kubelet.conf" }
  - { src: "kubelet.yaml", dest: "{{ kubernetes_home }}/etc/kubelet.yaml" }
  - { src: "kubelet.service.j2", dest: "/usr/lib/systemd/system/kubelet.service" }
  - { src: "config.toml", dest: "/etc/containerd/config.toml" }


- name: Install Worker Kubeconfig
  template:
    src: "node.kubeconfig"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { dest: "{{ kubernetes_home }}/etc/kubelet-bootstrap.kubeconfig", context_user: "kubelet-bootstrap" }


- name: Enable Kubernetes Worker Service
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
  - 'containerd'
  - 'kubelet'


- name: Downloading Pause Image
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "pause/{{ pause_version }}/pause-{{ pause_version }}-{{ansible_architecture}}.tar"
    dest: "/tmp/pause-{{ pause_version }}-{{ansible_architecture}}.tar"
    mode: get
    overwrite: different
  async: 6000
  poll: 100
  retries: 5
  delay: 10

- name: Import Pause Image Into Containerd
  shell: |
    ctr -n k8s.io i import /tmp/pause-{{ pause_version }}-{{ansible_architecture}}.tar

# - name: Wait Worker Join To Cluster
#   ansible.builtin.wait_for:
#     timeout: 10