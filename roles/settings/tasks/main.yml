---

- name: Wait 10s For Node Join The Cluster
  ansible.builtin.wait_for:
    timeout: 10

- name: Approve Worker Sign Request
  shell: |
    for csr in $(kubectl get csr|grep 'Pending'|awk '{print $1}'); do
      kubectl certificate approve $csr
    done

- name: Wait 10s For Node Ready
  ansible.builtin.wait_for:
    timeout: 10

- name: Taint Control To NoSchedule
  shell: |
    if kubectl get nodes "{{ inventory_hostname }}" >/dev/null 2>&1; then
      kubectl taint nodes "{{ inventory_hostname }}" --overwrite=true node-role.kubernetes.io/master=:NoSchedule
    fi
  when: allow_master_schedule != true

- name: Taint All Nodes To NoSchedule
  ansible.builtin.shell: |
    if kubectl get nodes "{{ item }}" >/dev/null 2>&1; then
      kubectl taint nodes "{{ item }}" --overwrite=true node.cilium.io/agent-not-ready=:NoSchedule
    fi
  loop: "{{ groups['worker'] }}"
  when: cni_provider == 'cilium'

- name: Taint All Nodes To NoSchedule
  ansible.builtin.shell: |
    if kubectl get nodes "{{ item }}" >/dev/null 2>&1; then
      kubectl taint nodes "{{ item }}" --overwrite=true node.k8spilot.io/network-not-ready=:NoSchedule
    fi
  loop: "{{ groups['worker'] }}"
  when: cni_provider == 'calico'

- name: Label Control Plane
  shell: |
    if kubectl get nodes "{{ inventory_hostname }}" >/dev/null 2>&1; then
      kubectl label nodes "{{ inventory_hostname }}" node-role.kubernetes.io/control-plane=
    fi

- name: Check Helm {{ helm_version }} Binary Exist
  ansible.builtin.stat:
    path: "{{ component_path }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
  register: helm_stat
  delegate_to: localhost
  run_once: true

- name: Create Components Directory
  ansible.builtin.file:
    path: "{{ component_path }}"
    state: directory
    mode: '0755'
  delegate_to: localhost
  run_once: true

- name: Downloading Helm {{ helm_version }}
  ansible.builtin.get_url:
    url: "{{ helm_download_url_prefix }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "{{ component_path }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    mode: '0755'
    timeout: 60
  # amazon.aws.s3_object:
  #   endpoint_url: "{{ s3_endpoint_url }}"
  #   access_key: "{{ s3_access_key }}"
  #   secret_key: "{{ s3_secret_key }}"
  #   bucket: "{{ s3_bucket_name }}"
  #   object: "helm/{{ helm_version }}/linux/{{ arch_alias }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
  #   dest: "{{ component_path }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
  #   mode: get
  #   overwrite: different
  delegate_to: localhost
  run_once: true
  retries: 5
  delay: 10
  when: helm_stat.stat.exists == false and method == 'online'

- name: Copy Helm {{ helm_version }} Binary To Remote Host
  ansible.builtin.copy:
    src:  "{{ component_path }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"

- name: Install Helm Binary On Remote Host
  uncompress:
    src:  "/tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: /usr/local/bin/
    mode: '0755'
    strip_components: 1
    include:
      - helm

- name: Install CNI Plugin
  ansible.builtin.include_role:
    name: "{{ cni_provider }}"

- name: Copy CoreDNS YML To Control
  ansible.builtin.template:
    src: coredns.yaml
    dest: "{{ kubernetes_home }}/etc/coredns.yml"

- name: Install CoreDNS {{ coredns_version }}
  ansible.builtin.shell: |
    kubectl apply -f {{ kubernetes_home }}/etc/coredns.yml

- name: Install CSI Driver
  ansible.builtin.include_role:
    name: csi
  when: enable_csi_nfs

- name: Install Ingress
  ansible.builtin.include_role:
    name: ingress
  when: enable_ingress and ingress_controller == 'ingress-nginx'