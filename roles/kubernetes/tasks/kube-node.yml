---

- name: Create Containerd Directory
  file:
    path: /etc/containerd
    state: directory
    mode: 0755
    recurse: yes

- name: Install Kernel Module Conf 
  copy:
    src: "cri.conf"
    dest: "/etc/modules-load.d/cri.conf"
    owner: root
    group: root
    mode: 0644

- name: Load Overlay and  Br_netfilter Module
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  with_items:
  - overlay
  - br_netfilter

- name: CRI Kernel Tuning
  ansible.posix.sysctl: 
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
  with_items: "{{ cri_kernel_params }}"


# - name: Download CRI-Containerd x86_64
#   oss_file:
#     oss_bucket: "{{ oss_bucket_name }}"
#     object: "/centos9/cri-containerd-cni-{{ cri_containerd_version }}-linux-amd64.tar.gz"
#     dest: "/root/soft/cri-containerd-cni-linux.tar.gz"
#     mode: get
#   when: " ansible_architecture == 'x86_64' "

# - name: Download CRI-Containerd ARM
#   oss_file:
#     oss_bucket: "{{ oss_bucket_name }}"
#     object: "/centos9/cri-containerd-cni-{{ cri_containerd_ARM_version }}-linux-arm64.tar.gz"
#     dest: "/root/soft/cri-containerd-cni-linux.tar.gz"
#     mode: get
#   when: " ansible_architecture == 'aarch64' "


- name: Install CRI-Containerd
  ansible.builtin.unarchive:
    src: "{{role_path}}/files/cri-containerd-cni-{{ cri_containerd_version }}-linux-{{ansible_architecture}}.tar.gz"
    dest: "/"
    owner: root
    group: root
    remote_src: no
#   when: " ansible_architecture == 'x86_64' "

# - name: Install CRI-Containerd ARM64
#   ansible.builtin.unarchive:
#     src: "{{role_path}}/files/cri-containerd-cni-{{ cri_containerd_version }}-linux-arm64.tar.gz"
#     dest: "/"
#     owner: root
#     group: root
#     remote_src: no
#   when: " ansible_architecture == 'aarch64' "


# - name: Download Kubernetes Node x86_64
#   oss_file:
#     oss_bucket: "{{ oss_bucket_name }}"
#     object: "/centos9/kube-node.tar.gz"
#     dest: "/root/soft/kube-node.tar.gz"
#     mode: get
#   when: " ansible_architecture == 'x86_64' "

# - name: Download Kubernetes Node ARM
#   oss_file:
#     oss_bucket: "{{ oss_bucket_name }}"
#     object: "/centos9/kube-node.{{ kube_version }}.arm64.tar.gz"
#     dest: "/root/soft/kube-node.tar.gz"
#     mode: get
#   when: " ansible_architecture == 'aarch64' "

- name: Install Kubernetes Node
  ansible.builtin.unarchive:
    src: "{{role_path}}/files/k8s_{{ kube_version }}_linux_{{ansible_architecture}}.tar.gz"
    dest: "{{ kubernetes_home }}/bin/"
    owner: root
    group: root
    remote_src: no
    exclude:
      - "kube-admin"
      - "kube-apiserver"
      - "kube-proxy"
      - "kube-scheduler"
      - "kube-aggregator"
      - "kube-controller-manager"
  
# - name: Clean k8s Master Binary files
#   ansible.builtin.file:
#     path: "{{ kubernetes_home }}/bin/{{ item }}"
#     state: absent
#   with_items: 
#     - "kube-admin"
#     - "kube-apiserver"
#     - "kube-proxy"
#     - "kube-scheduler"
#     - "kube-aggregator"
#     - "kube-controller-manager"


- name: Install Node SSL Certificate And Token 
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "{{ pem_file_ca }}", dest: "{{ kubernetes_home }}/ssl/ca.pem" }
  - { src: "{{ pem_file_key }}", dest: "{{ kubernetes_home }}/ssl/key.pem" }


- name: Install Kube-Node Systemd Config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "kubelet.conf", dest: "{{ kubernetes_home }}/etc/kubelet.conf" }
  - { src: "kubelet.yaml", dest: "{{ kubernetes_home }}/etc/kubelet.yaml" }
  - { src: "kubelet.service.j2", dest: "/usr/lib/systemd/system/kubelet.service" }
  - { src: "config.toml", dest: "/etc/containerd/config.toml" }
  tags: nodefix


- name: Install Node Kubeconfig
  template:
    src: "node.kubeconfig"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { dest: "{{ kubernetes_home }}/etc/kubelet-bootstrap.kubeconfig", context_user: "kubelet-bootstrap" }
  tags: nodefix


- name: Enable Kubernetes Node Service
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
  - 'containerd'
  - 'kubelet'
  tags: nodefix


- name: Copy pause image to remote
  copy:
    src: "{{role_path}}/files/pause-3.9-{{ansible_architecture}}.tar"
    dest: ~/

- name: Import pause image
  shell: |
    ctr -n k8s.io i import ~/pause-3.9-{{ansible_architecture}}.tar

