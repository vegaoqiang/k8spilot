---

- name: Set Architecture Alias
  set_fact:
    arch_alias: >-
      {% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}{{ ansible_architecture }}{% endif %}

- name: Downloading Kubernetes {{ kube_version }} Components
  ansible.builtin.get_url:
    url: "{{ download_location }}/kubernetes/{{ kube_version }}/linux/{{ arch_alias }}/{{ item }}"
    dest: "{{ kubernetes_home }}/bin/{{ item }}"
    mode: '0755'
    timeout: 60
  async: 6000
  poll: 10
  loop:
    - apiextensions-apiserver
    - kube-apiserver
    - kube-controller-manager
    - kube-log-runner
    - kube-proxy
    - kube-scheduler
    - kubectl
    - kubectl-convert
    - mounter


- name: Install SSL Certificate
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root 
    group: root 
    mode: 0640
  with_items:
  - { src: "vica-config.json", dest: "{{ kubernetes_home }}/ssl/vica-config.json" }
  - { src: "{{ inventory_dir }}/{{ root_cert }}", dest: "{{ kubernetes_home }}/ssl/ca.pem" }
  - { src: "{{ inventory_dir }}/{{ root_key }}", dest: "{{ kubernetes_home }}/ssl/key.pem" }
  - { src: "bootstrap.yaml", dest: "{{ kubernetes_home }}/etc/bootstrap.yaml" }

- name: Install Kube-Master Systemd Config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0640
  with_items:
  - { src: "token", dest: "{{ kubernetes_home }}/ssl/token" }
  - { src: "kube-admin-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-admin-csr.json" }
  - { src: "kube-apiserver-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-apiserver-csr.json" }
  - { src: "kube-controller-manager-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-controller-manager-csr.json" }
  - { src: "kube-scheduler-csr.json", dest: "{{ kubernetes_home }}/ssl/kube-scheduler-csr.json" }
  - { src: "kube-apiserver.conf", dest: "{{ kubernetes_home }}/etc/kube-apiserver.conf" }
  - { src: "kube-controller-manager.conf", dest: "{{ kubernetes_home }}/etc/kube-controller-manager.conf" }
  - { src: "kube-scheduler.conf", dest: "{{ kubernetes_home }}/etc/kube-scheduler.conf" }
  - { src: "kube-apiserver.service.j2", dest: "/usr/lib/systemd/system/kube-apiserver.service" }
  - { src: "kube-controller-manager.service.j2", dest: "/usr/lib/systemd/system/kube-controller-manager.service" }
  - { src: "kube-scheduler.service.j2", dest: "/usr/lib/systemd/system/kube-scheduler.service" }
  - { src: "cilium-helm-release.yml", dest: "{{ kubernetes_home }}/etc/cilium-helm-release.yml" }
  - { src: "coredns.yml", dest: "{{ kubernetes_home }}/etc/coredns.yml" }
  - { src: "ip-masq-agent.yml", dest: "{{ kubernetes_home }}/etc/ip-masq-agent.yml" }
  tags:
    - masterconfig

- name: Generate SSL Certificates
  shell: |
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=vica-config.json kube-admin-csr.json  | cfssljson -bare kube-admin
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=vica-config.json kube-apiserver-csr.json  | cfssljson -bare kube-apiserver  
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=vica-config.json kube-controller-manager-csr.json  | cfssljson -bare kube-controller-manager
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=vica-config.json kube-scheduler-csr.json  | cfssljson -bare kube-scheduler
  args:
    chdir: "{{ kubernetes_home }}/ssl"

- name: Install Master Kubeconfig
  template:
    src: "master.kubeconfig"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0600
  with_items:
  - { dest: "/root/.kube/config", context_user: "kube-admin" }
  - { dest: "{{ kubernetes_home }}/etc/kube-admin.kubeconfig", context_user: "kube-admin" }
  - { dest: "{{ kubernetes_home }}/etc/kube-controller-manager.kubeconfig", context_user: "kube-controller-manager" }
  - { dest: "{{ kubernetes_home }}/etc/kube-scheduler.kubeconfig", context_user: "kube-scheduler" }
  changed_when: True

- name: Enable Kubernetes Master Service
  ansible.builtin.service:
    name: "{{ item }}"
    enabled: yes
    state: started
  with_items:
  - 'kube-apiserver'
  - 'kube-controller-manager'
  - 'kube-scheduler'

- name: Install Client Certificate Auto Approve
  shell: |
    ln -sfT {{ kubernetes_home }}/bin/kubectl /usr/local/bin/kubectl
    kubectl apply -f {{ kubernetes_home }}/etc/bootstrap.yaml


- name: Downloading Helm
  ansible.builtin.get_url:
    url: "{{ download_location }}/helm/{{ helm_version }}/linux/{{ arch_alias }}/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz"
    mode: '0755'
    timeout: 60
  async: 6000
  poll: 10

- name: Install Helm
  ansible.builtin.shell: | 
    tar --strip-components=1  -xf /tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz -C /usr/local/bin/
    rm -f /usr/local/README.md /usr/local/LICENSE
    rm -f /tmp/helm-{{ helm_version }}-linux-{{ arch_alias }}.tar.gz
    chmod +x /usr/local/bin/helm

- name: Downloading Cilium Cli
  ansible.builtin.get_url:
    url: "{{ download_location }}/cilium/cilium-cli/{{ cilium_cli_version }}/linux/cilium-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/cilium-linux-{{ arch_alias }}.tar.gz"
    mode: '0755'
    timeout: 60
  async: 6000
  poll: 10
  when: "{{ cni_plugin }} == 'cilium'"


- name: Install Cilium Cli
  ansible.builtin.shell: | 
    tar -xf /tmp/cilium-linux-{{ arch_alias }}.tar.gz -C /usr/local/bin/
    chmod +x /usr/local/bin/cilium
  when: "{{ cni_plugin }} == 'cilium'"