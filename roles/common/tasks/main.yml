---

# - name: Print all facts
#   ansible.builtin.debug:
#     var: ansible_facts


# - name: Clear Fact Cache
#   delegate_to: localhost
#   file:
#     path: .cache
#     state: absent
#   run_once: true

- name: Check System Kernel Version
  ansible.builtin.shell: |
    kernel_major=$(uname -r|awk -F'.' '{print $1}')
    kernel_minor=$(uname -r|awk -F'.' '{print $2}')
    if [ "${kernel_major}" -lt 5 ]; then 
      exit 1
    elif [ "${kernel_major}" -ge 5 ] && [ "${kernel_minor}" -lt 4 ]; then
      exit 1
    fi
  register: kernel_check

- name: Fail If Kernel < 5.4
  ansible.builtin.meta: end_play
  when: kernel_check.rc != 0

- name: Check System GLIBC Version
  ansible.builtin.shell: |
    if  glibc_info=$(ldd --version 2>&1); then
      echo "${glibc_info}"|head -n 1|awk '{print $NF}'
    else
      echo 0
    fi
  register: glibc_version_raw

- name: Fail If GLIBC Version < 2.17
  ansible.builtin.meta: end_play
  when: glibc_version_raw.stdout is version('2.17', '<')

- name: Delete Repo Default
  shell: rm -rf /etc/yum.repos.d/*
  args:
      chdir: /etc/yum.repos.d/
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_release == "Stream"
    - ansible_distribution_major_version == "9"

 
- name: Change CN Mirror Centos/RHEL 9
  template:
    src: centos.repo
    dest: /etc/yum.repos.d/centos.repo
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_release == "Stream"
    - ansible_distribution_major_version == "9"

- name: Install EPEL Repo - Centos/RHEL 9
  template:
    src: epel-9.repo
    dest: /etc/yum.repos.d/epel.repo
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_release == "Stream"
    - ansible_distribution_major_version == "9"
    
    
- name: Change Selinux Config
  ansible.builtin.shell: |
    if [ -f /etc/selinux/config ]; then 
      sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
      force=$(getenforce)
      if [ "${force}" = "Enforcing" ] || [ "${force}" = "enforcing" ]; then
        setenforce 0
      fi
    fi

- name: Update Or Install Dependence Package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ update_package }}"
  when: 
    - ansible_distribution != 'Debian'
    - ansible_distribution != 'Ubuntu'

- name: Update Or Install Dependence Package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ apt_package }}"
  when: 
    - ansible_distribution in ['Debian','Ubuntu']

- name: Update Timezone
  shell: timedatectl set-timezone Asia/Shanghai

- name: Update Hostname
  hostname: name={{ inventory_hostname }}


- name: Change limit config
  blockinfile:
    dest: /etc/security/limits.conf
    insertafter: "# End of file"
    content: |
      *     soft    nofile  800000
      *     hard    nofile  800000

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Disable Services
  service: name={{ item }} enabled=no state=stopped
  with_items: "{{ disable_service }}"
  ignore_errors: yes
  when: 
    - ansible_facts.services[service_name] is defined
  vars:
    service_name: "{{ item }}.service"


- name: Kernel Tuning
  sysctl: name={{ item.name }} value={{ item.value }} sysctl_set=yes state=present
  with_items: '{{ kernel_params }}'
  ignore_errors: yes


- name: Update chrony.conf
  template:
    src: chrony.conf 
    dest: /etc/chrony.conf

- name: Restart Chronyd Service
  shell: systemctl restart chronyd

- name: Disable SWAP
  shell: |
    swapoff -a
    sed -i "/#.*swap/! s/.*swap.*/#&/" /etc/fstab
    sysctl --system


- name: Set Architecture Alias
  set_fact:
    arch_alias: >-
      {% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}{{ ansible_architecture }}{% endif %}


# - name: Enable PIP Package Manager
#   ansible.builtin.shell: |
#     if ! python3 -m ensurepip; then
#       exit 0
#     fi


# - name: Install Python Module Use PIP
#   ansible.builtin.pip:
#     name: "{{ item }}"
#     extra_args: -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
#   loop: "{{ pip_module }}"
#   when: 
#     - ansible_distribution != 'Debian'
#     - ansible_distribution != 'Ubuntu'


# - name: Install Python Module Use PackageManager
#   ansible.builtin.package:
#     name: "{{ item }}"
#     state: present
#   loop: "{{ python_module }}"
#   when: 
#     - ansible_distribution in ['Debian','Ubuntu']

- name: Create Temp Directory In localhost
  ansible.builtin.file:
    path: "{{ playbook_dir }}/.ansible_temp"
    state: directory
    mode: '0755'
  run_once: true
  delegate_to: localhost
  
- name: Downloading Cfssl v{{ cfssl_version }}
  # ansible.builtin.get_url:
  #   url: "{{ download_location }}/cfssl/v{{ cfssl_version }}/linux/{{ arch_alias }}/{{ item }}_{{ cfssl_version }}_linux_{{ arch_alias }}"
  #   dest: "/tmp/{{ item }}_{{ cfssl_version }}_linux_{{ arch_alias }}"
  #   mode: '0755'
  #   timeout: 60
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "cfssl/v{{ cfssl_version }}/linux/{{ arch_alias }}/{{ item }}_{{ cfssl_version }}_linux_{{ arch_alias }}"
    dest: "{{ playbook_dir }}/.ansible_temp/{{ item }}_{{ cfssl_version }}_linux_{{ arch_alias }}"
    mode: get
    overwrite: different
  loop:
    - cfssl
    - cfssljson
  delegate_to: localhost
  run_once: true
  # async: 6000
  # poll: 100
  retries: 5
  delay: 10

- name: Copy Cfssl Tool To Remote Host
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/.ansible_temp/{{ item }}_{{ cfssl_version }}_linux_{{ arch_alias }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: '0755'
  loop:
    - cfssl
    - cfssljson

# - name: Install Cfssl Tool
#   ansible.builtin.shell: |
#     mv /tmp/{{ item }}_{{ cfssl_version }}_linux_{{ arch_alias }} /usr/local/bin/{{ item }}
#     chmod +x /usr/local/bin/{{ item }}
#   loop:
#     - cfssl
#     - cfssljson

- name: Create CA CSR File
  ansible.builtin.copy:
    src: root-csr.json
    dest: /tmp/ca/
  when: inventory_hostname in groups['control']

- name: Generate Root CA
  ansible.builtin.shell: |
    cfssl gencert -initca root-csr.json |cfssljson -bare ca
  args:
    chdir: /tmp/ca
  when: inventory_hostname in groups['control']

- name: Fetch CA File
  ansible.builtin.fetch:
    src: "/tmp/ca/{{ item }}"
    dest: "{{ playbook_dir }}/ca/{{ item }}"
    flat: true
  loop:
    - ca.pem
    - ca-key.pem
  when: inventory_hostname in groups['control']

- name: Create Kubernetes Dirctory
  file:
    path: "{{ kubernetes_home }}/{{item}}"
    state: directory
    mode: 0755
    recurse: yes
    owner: root
    group: root
  with_items:
  - 'bin'
  - 'etc'
  - 'ssl'
  - 'logs'

- name: Create .kube Dirctory
  file:
    path: "/root/.kube"
    state: directory
    mode: 0755
    recurse: yes
    owner: root
    group: root
