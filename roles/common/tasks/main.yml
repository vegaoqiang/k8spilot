---

# - name: Print all facts
#   ansible.builtin.debug:
#     var: ansible_facts

# - name: Create Soft Directory
#   file:
#     path: /root/soft
#     state: directory
#     mode: 0755
#     recurse: yes

# - name: Update Motd
#   template:
#     src: motd
#     dest: /etc/motd
#   tags: sethost

- name: Delete Repo Default
  shell: rm -rf /etc/yum.repos.d/*
  args:
      chdir: /etc/yum.repos.d/
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_release == "Stream"
    - ansible_distribution_major_version == "9"

 
- name: Change CN Mirror Centos/RHEL 9
  template:
    src: centos.repo
    dest: /etc/yum.repos.d/centos.repo
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_release == "Stream"
    - ansible_distribution_major_version == "9"

- name: Install EPEL Repo - Centos/RHEL 9
  template:
    src: epel-9.repo
    dest: /etc/yum.repos.d/epel.repo
  when: 
    - ansible_distribution == 'CentOS'
    - ansible_distribution_release == "Stream"
    - ansible_distribution_major_version == "9"
    
    
- name: Change Selinux Config
  ansible.builtin.shell: |
    if [ -f /etc/selinux/config ]; then 
      sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
      force=$(getenforce)
      if [ "${force}" = "Enforcing" ] || [ "${force}" = "enforcing" ]; then
        setenforce 0
      fi
    fi


- name: Update Timezone
  shell: timedatectl set-timezone Asia/Shanghai

- name: Update Hostname
  hostname: name={{ inventory_hostname }}


- name: Change limit config
  blockinfile:
    dest: /etc/security/limits.conf
    insertafter: "# End of file"
    content: |
      *     soft    nofile  800000
      *     hard    nofile  800000

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Disable Services
  service: name={{ item }} enabled=no state=stopped
  with_items: "{{ disable_service }}"
  ignore_errors: yes
  when: 
    - ansible_facts.services[service_name] is defined
  vars:
    service_name: "{{ item }}.service"


# - name: Disable Services
#   service: name={{ item }} enabled=no state=stopped
#   with_items: "{{ openeuler_disable_service }}"
#   ignore_errors: yes
#   when: " ansible_distribution == 'openEuler' "

- name: Kernel Tuning
  sysctl: name={{ item.name }} value={{ item.value }} sysctl_set=yes state=present
  with_items: '{{ kernel_params }}'
  ignore_errors: yes


- name: Update chrony.conf
  template:
    src: chrony.conf 
    dest: /etc/chrony.conf

- name: Restart Chronyd Service
  shell: systemctl restart chronyd

- name: Disable SWAP
  shell: |
    swapoff -a
    sed -i "s/.*swap.*/#&/" /etc/fstab
    sysctl --system

#- name: repair polkit pkexec
#  shell: chmod 0755 /usr/bin/pkexec
# 
# 
# - name: update network
#   shell: nmcli  con mod 'System eth0'  ipv4.dns "{{ coredns_ip }}"; nmcli con mod 'System eth0' ipv4.ignore-auto-dns yes
#   tags:  dns
# 
# - name: update network DNS
#   shell: echo 'supersede domain-name-servers {{ coredns_ip }};' > /etc/dhcp/dhclient.conf
#   tags:  dns
# 
# - name: restart network
#   shell: systemctl restart NetworkManager
#   tags:  dns

# - name: disable node_exporter
#   ansible.builtin.systemd_service:
#     name: node_exporter.service
#     state: stopped
#     enabled: false
#   ignore_errors: yes

- name: Set Architecture Alias
  set_fact:
    arch_alias: >-
      {% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}{{ ansible_architecture }}{% endif %}

- name: Download Cfssl v{{ cfssl_version }}
  ansible.builtin.get_url:
    url: "{{ download_location }}/cfssl/v{{ cfssl_version }}/linux/{{ arch_alias }}/cfssl_{{ cfssl_version }}_linux_{{ arch_alias }}"
    dest: /tmp/cfssl
    mode: '0755'
    timeout: 60
  async: 6000
  poll: 10

- name: Install Cfssl Tool
  ansible.builtin.shell:
    mv /tmp/cfssl /usr/local/bin/