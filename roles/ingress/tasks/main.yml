
# - name: Downloading Ingress-Nginx Helm Chart
#   amazon.aws.s3_object:
#     endpoint_url: "{{ s3_endpoint_url }}"
#     access_key: "{{ s3_access_key }}"
#     secret_key: "{{ s3_secret_key }}"
#     bucket: "{{ s3_bucket_name }}"
#     object: "ingress-nginx/ingress-nginx-{{ ingress_helm_version }}.tgz"
#     dest: "{{ playbook_dir }}/.ansible_temp/ingress-nginx-{{ ingress_helm_version }}.tgz"
#     mode: get
#     overwrite: different
#   delegate_to: localhost
#   run_once: true

# - name: Copy Ingress-Nginx Helm Chart To Remote Host
#   ansible.builtin.copy:
#     src: "{{ playbook_dir }}/.ansible_temp/ingress-nginx-{{ ingress_helm_version }}.tgz"
#     dest: "/tmp/ingress-nginx-{{ ingress_helm_version }}.tgz"

# - name: Wait Cluster Network Ready
#   ansible.builtin.wait_for:
#     host: "{{ kube_cluster_apiserver }}"
#     port: 443
#     state: started
#     timeout: 600

# - name: Install Ingress-Nginx
#   kubernetes.core.helm:
#     chart_ref: "/tmp/ingress-nginx-{{ ingress_helm_version }}.tgz"
#     name: ingress-nginx
#     chart_version: "{{ ingress_helm_version }}"
#     wait: false
#     # state: absent
#     release_namespace: ingress-nginx
#     create_namespace: true
#     values:
#       global:
#         image:
#           registry: "{{ ingress_registry_prefix }}/registry.k8s.io"
#       controller:
#         tag: "{{ ingress_nginx_version }}"
#         service:
#           nodePorts:
#             http: "{{ ingress_nodeport_http }}"
#             https: "{{ ingress_nodeport_https }}"
#         ingressClassResource:
#           default: true

- name: Check Ingress-Nginx {{ ingress_nginx_version }} Manifest Exists
  ansible.builtin.stat:
    path: "{{ component_path }}/ingress-nginx-{{ ingress_nginx_version }}.yaml"
  delegate_to: localhost
  run_once: true
  register: ingress_stat

- name: Ingress-Nginx {{ ingress_nginx_version }} Manifest Not Exist
  ansible.builtin.fail:
    msg:  "{{ component_path }}/ingress-nginx-{{ ingress_nginx_version }}.yaml not exists"
  when: not ingress_stat.stat.exists and method == 'offline'

        
- name: Downloading Ingress-Nginx Manifest
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "ingress-nginx/{{ ingress_nginx_version }}/deploy.yaml"
    dest: "{{ component_path }}/ingress-nginx-{{ ingress_nginx_version }}.yaml"
    mode: get
    overwrite: different
  delegate_to: localhost
  run_once: true
  when: not ingress_stat.stat.exists and method == 'online'

- name: Copy Ingress-Nginx {{ ingress_nginx_version }} Manifest To Remote Host
  ansible.builtin.copy:
    src: "{{ component_path }}/ingress-nginx-{{ ingress_nginx_version }}.yaml"
    dest: "/tmp/ingress-nginx-{{ ingress_nginx_version }}.yaml"
  
- name: Change Ingress-Nginx Image Registry
  ansible.builtin.shell: sed -i "s#registry.k8s.io#{{ ingress_registry_prefix }}/registry.k8s.io#g" /tmp/ingress-nginx-{{ ingress_nginx_version }}.yaml
  when: method == 'online'

- name: Process Offline Image
  include_tasks: offline.yml
  when: method == 'offline'

- name: Install Ingress-Nginx Use Manifest
  ansible.builtin.shell: |
    kubectl apply -f /tmp/ingress-nginx-{{ ingress_nginx_version }}.yaml
    kubectl patch ingressclass nginx -p '{"metadata":{"annotations":{"ingressclass.kubernetes.io/is-default-class":"true"}}}'
