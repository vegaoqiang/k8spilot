---

- name: Set Architecture Alias
  set_fact:
    arch_alias: >-
      {% if ansible_architecture == 'x86_64' %}amd64{% elif ansible_architecture == 'aarch64' %}arm64{% else %}{{ ansible_architecture }}{% endif %}


- name: Downloading Etcd {{ etcd_version }}
  # ansible.builtin.get_url:
  #   url: "{{ download_location }}/etcd/{{ etcd_version }}/linux/{{ arch_alias }}/etcd-{{ etcd_version }}-linux-{{ arch_alias }}.tar.gz"
  #   dest: /tmp/
  #   mode: '0755'
  #   timeout: 60
  amazon.aws.s3_object:
    endpoint_url: "{{ s3_endpoint_url }}"
    access_key: "{{ s3_access_key }}"
    secret_key: "{{ s3_secret_key }}"
    bucket: "{{ s3_bucket_name }}"
    object: "etcd/{{ etcd_version }}/linux/{{ arch_alias }}/etcd-{{ etcd_version }}-linux-{{ arch_alias }}.tar.gz"
    dest: "/tmp/etcd-{{ etcd_version }}-linux-{{ arch_alias }}.tar.gz"
    mode: get
    overwrite: different
  async: 6000
  poll: 100
  retries: 5
  delay: 10


- name: Add Etcd User
  user:
    name: "{{ etcd_user }}"
    home: "{{ etcd_home }}"
    shell: /sbin/nologin
    system: yes

- name: Create Etcd Dirctory
  file: 
    path: "{{ etcd_home }}/{{item}}"
    state: directory
    mode: 0755 
    recurse: yes
    owner: "{{ etcd_user }}"
    group: "{{ etcd_user }}"
  with_items:
  - 'bin'
  - 'data'
  - 'etc'
  - 'ssl'

- name: Make Etcd Config
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ etcd_user }}"
    group: "{{ etcd_user }}"
    mode: 0644
  with_items:
  - { src: "etcd.service.j2", dest: "/usr/lib/systemd/system/etcd.service" }
  - { src: "etcd.conf.yaml", dest: "{{ etcd_home }}/etc/etcd.conf.yaml" }
  - { src: "etcd-csr.json", dest: "{{ etcd_home }}/ssl/etcd-csr.json" }
  tags: conf


- name: Copy SSL And Config
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ etcd_user }}"
    group: "{{ etcd_user }}"
    mode: 0644
  with_items:
  - { src: "{{ inventory_dir }}/{{ root_cert }}", dest: "{{ etcd_home }}/ssl/ca.pem" }
  - { src: "{{ inventory_dir }}/{{ root_key }}", dest: "{{ etcd_home }}/ssl/key.pem" }
  - { src: "vica-config.json", dest: "{{ etcd_home }}/ssl/vica-config.json" }


- name: Install Etcd Binary
  shell: |
    tar --strip-components=1 -xf /tmp/etcd-{{ etcd_version }}-linux-{{ arch_alias }}.tar.gz -C {{ etcd_home }}/bin/
    rm -fr {{ etcd_home }}/bin/README* {{ etcd_home }}/bin/Documentation*
    export PATH=$PATH:/usr/local/bin
    cd {{ etcd_home }}/ssl/
    cfssl gencert -ca=ca.pem -ca-key=key.pem -config=vica-config.json etcd-csr.json  | cfssljson -bare etcd
    rm -rf key.pem
    ln -sfT {{ etcd_home }}/bin/etcdctl /usr/local/bin/etcdctl
    chown -R {{ etcd_user }}.{{ etcd_user }}  {{ etcd_home }}
  notify:
  - Start And Enable Etcd Service
  - Wait Etcd Service Started
  - Check Etcd Cluster Healthly
  - Print Etcd Cluster Status