apiVersion: apps/v1
kind: Deployment
metadata:
  name: intellgent-sensing-cloud-web
  namespace: universal
  labels:
    app: intellgent-sensing-cloud-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: intellgent-sensing-cloud-web
  template:
    metadata:
      labels:
        app: intellgent-sensing-cloud-web
    spec:
      containers:
      - name: intellgent-sensing-cloud-web
        image: {{intellgent_sensing_cloud_web}}
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-config
      imagePullSecrets:
      - name: regcred
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: NotIn
                values:
                - k8s-master01
---
# service
apiVersion: v1
kind: Service
metadata:
  name: intellgent-sensing-cloud-web-svc
  namespace: universal
spec:
  selector:
    app: intellgent-sensing-cloud-web
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: intellgent-sensing-cloud-web-nodeport
  namespace: universal
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 40080
  selector:
    app: intellgent-sensing-cloud-web
  type: NodePort

---
# ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: universal
  name: intellgent-sensing-cloud-web-ingress
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 1000m
spec:
  rules:
    - host: {{ universal_web_domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: intellgent-sensing-cloud-web-svc
                port:
                  number: 80

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: universal
data:
  default.conf: |
    map $host $origin_type {
      default "";
      # 视频汇聚的省政务外网IP
      {{universal_web_sheng_ip}} "1";
      # 视频汇聚的市政务外网IP
      {{universal_web_shi_ip}} "2";
    }

    server {
      listen 80 default_server;
      server_name _;
      client_max_body_size 1024M;
      root /app;
      index index.html index.htm;

      # pass平台反向代理
      location ~* ^/(TheNextWebApp|ras/dic|videoService/eventCenter)/ {
          # 视频汇聚的省政务外网IP
          if ($host = "{{universal_web_sheng_ip}}") {
              # paas平台内网IP地址
              proxy_pass https://{{paas_inner_ip}}:7902;
          }
          # 市政务外网IP
          if ($host = "10.13.30.125") {
              # paas平台的内网IP地址
              proxy_pass https://{{paas_inner_ip}}:7905;
          }
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header REMOTE-HOST $remote_addr;
          add_header X-Cache $upstream_cache_status;
          add_header Cross-origin-Resource-Policy cross-origin;
          add_header Cross-Origin-Embedder-Policy require-corp;
          add_header Cache-Control no-cache;
      }
      # 禁用 .html 文件缓存
      location ~* \.html$ {
          add_header Cache-Control "no-cache, no-store, must-revalidate";
          try_files $uri $uri/ @router;
          add_header Cross-Origin-Opener-Policy same-origin;
          add_header Cross-Origin-Embedder-Policy credentialless;
      }

      location / {
          try_files $uri $uri/ @router;
          index index.html;
          add_header Cross-Origin-Opener-Policy same-origin;
          add_header Cross-Origin-Embedder-Policy credentialless;
      }
      location @router {
          rewrite ^.*$ /index.html last;
      }

      # 消息推送websocket服务
      location ^~/web/advice/v1/pushMessage {
        proxy_pass http://apisix-gateway.apisix.svc.cluster.local:80;
        proxy_http_version 1.1; #这里必须使用http 1.1
        proxy_connect_timeout 10s;
        proxy_read_timeout 120s;
        proxy_send_timeout 120s;
        #下面两个必须设置，请求头设置为ws请求方式
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }

      # 通用的接口反向代理
      location ~* ^/(web|openapi)/ {
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header REMOTE-HOST $remote_addr;
          proxy_set_header ORIGIN-SOURCE $origin_type;
          add_header X-Cache $upstream_cache_status;
          add_header Cache-Control no-cache;
          proxy_pass http://apisix-gateway.apisix.svc.cluster.local:80;
        }

      # minio反向代理
          location ~* ^/(video-picture/ops|universal)/ {
          proxy_set_header Host {{minio_host}}; # 确保 Host 头匹配目标服务器
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Host $host;
          add_header X-Cache $upstream_cache_status;
          add_header Cache-Control no-cache;
          # proxy_pass http://minio-videocollect-sheng-test.guideirai.online:39000;
          proxy_pass http://{{minio_host}};
          proxy_http_version 1.1;
          proxy_set_header Connection "";
          proxy_buffering off; # 禁用缓冲以实时传输
      }
    }